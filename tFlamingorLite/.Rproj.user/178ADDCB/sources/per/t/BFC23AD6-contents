#' Divide domain for flamingo
#' @param tflamingo_high_res_obj high resolution flamingo object to generate domain
#' @param domain_res Size of the domains in bps, e.g. 1e6. Try strawr::readHicBpResolutions() to see available resolutions.
#' @param frag_res Size of the fragment in bps, e.g. 1e4. Try strawr::readHicBpResolutions() to see available resolutions.
#' @param temp_folder store the temporary domain data
#' @export

tflamingo.divide_domain <- function(tflamingo_high_res_obj,
                          domain_res,
                          frag_res,
                          temp_folder)
{

  #### create temp folder
  options(scipen = 999)

  res = list()

  bin_size = domain_res/frag_res
  n = tflamingo_high_res_obj@n_frag
  chr = tflamingo_high_res_obj@chr_name
  input_if = tflamingo_high_res_obj@IF

  input_if[is.na(input_if)] <- 0
  pd = tflamingo_high_res_obj@PD

  # write out high resolution domain matrix
  print('Writing out temp files...')
  n_domain = ceiling(n/bin_size)
  for(i in 1:n_domain){

    # contact frequency
    start_id <- (i-1)*bin_size+1
    end_id <- min(n,i*bin_size)
    tmp_input_if <- as.matrix(input_if[start_id:end_id,start_id:end_id])
    tmp_pd <- as.matrix(pd[start_id:end_id,start_id:end_id])

    # 1D coordinate
    start_loc = ((start_id:end_id)-1)*frag_res+1
    end_loc = (start_id:end_id)*frag_res
    tmp_frag = data.frame(chr=chr,start=start_loc,end=end_loc)

    #tmp_input_if = (tmp_input_if + t(tmp_input_if))/2
    #tmp_pd = (tmp_pd + t(tmp_pd))/2

    # available data
    if (check_data_availability(tmp_input_if)){
      write.table(tmp_input_if,paste0(temp_folder,"/domain_data/IF_domain_",i,".txt"),col.names = F,row.names = F,sep="\t",quote=F)
      #write.table(tmp_pd,paste0(temp_folder,"/domain_data/PD_domain_",i,".txt"),col.names = F,row.names = F,sep="\t",quote=F)
      write.table(tmp_frag,paste0(temp_folder,"/genomic_loc/genomic_loc_domain_",i,".txt"),col.names = F,row.names = F,sep="\t",quote=F)
    }
  }
}


check_data_availability <- function(input_if){
  input_if <- as.matrix(input_if)
  invalid_id <- which(apply(input_if,1,max)==0)
  if(length(invalid_id) == dim(input_if)[1]){
    return(F)
  }else{
    return(T)
  }
}
